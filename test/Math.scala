import scala.language.implicitConversions
object MathDSL {
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  case class Stmts (arg0: Stmt, arg1: Program) extends Program
  sealed trait Program
  sealed trait Factor extends Term
  case class Num (arg0: Int) extends Factor
  case class Mul (arg0: Term, arg1: Factor) extends Term
  case class Stmt (arg0: Expr) extends Program
  case class Sub (arg0: Expr, arg1: Term) extends Expr
  case class Paren (arg0: Expr) extends Factor
  sealed trait Expr
  case class Div (arg0: Term, arg1: Factor) extends Term
  case class Add (arg0: Expr, arg1: Term) extends Expr
  sealed trait Term extends Expr
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  case class Shift [T, N1, N2] (shift: (N1, T) => N2)
  case class Reduce [T, N1, N2] (reduce: N1 => N2)
  case class Accept [NX, R] (accept: NX => R)
  case class Transition [T, N1, N2] (transit: (N1, T) => N2)
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  case class Node0 [+NX] (prev: NX, value: Factor)
  case class Node1 [+NX] (prev: NX, value: Sub)
  case class Node2 [+NX] (prev: NX)
  case class Node3 [+NX] (prev: NX, value: Term)
  case class Node4 [+NX] (prev: NX, value: Term)
  case class Node5 [+NX] (prev: NX, value: Paren)
  case class Node6 [+NX] (prev: NX)
  case class Node7 [+NX] (prev: NX, value: Int)
  case class Node8 [+NX] (prev: NX, value: Expr)
  case class Node9 [+NX] (prev: NX, value: Term)
  case class Node10 [+NX] (prev: NX, value: Add)
  case class Node11 [+NX] (prev: NX, value: Program)
  case class Node12 [+NX] (prev: NX)
  case class Node13 [+NX] (prev: NX, value: Factor)
  case class Node14 [+NX] (prev: NX, value: Num)
  case class Node15 [+NX] (prev: NX, value: Program)
  case class Node16 [+NX] (prev: NX, value: Factor)
  case class Node17 [+NX] (prev: NX)
  case class Node18 [+NX] (prev: NX, value: Expr)
  case class Node19 [+NX] (prev: NX)
  case class Node20 [+NX] (prev: NX)
  case class Node21 [+NX] (prev: NX, value: Mul)
  case class Node22 [+NX] (prev: NX)
  case class Node23 [+NX] (prev: NX, value: Div)
  case class Node24 [+NX] (prev: NX, value: Stmts)
  case class Node25 [+NX] (prev: NX, value: Stmt)
  case object Node26
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  type IntNum = Node7[Node26.type]
  case class Id (value: String)
  case object EoI
  lazy val Lp = Node20(Node26)
  case object Mul
  case object Rp
  case object Minus
  case object End
  case object Plus
  case object Div
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  def int (value: Int): IntNum = Node7(Node26, value)
  def id (value: String): Id = Id(value)
  def $$ : EoI.type = EoI
  def lp : Lp.type = Lp
  def mul : Mul.type = Mul
  def rp : Rp.type = Rp
  def minus : Minus.type = Minus
  def end : End.type = End
  def plus : Plus.type = Plus
  def div : Div.type = Div
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  implicit def shift_transition [T, N1, N2] (implicit shift: Shift[T, N1, N2]): Transition[T, N1, N2] = Transition { shift.shift }
  implicit def reduce_transition [T, N1, N2, N3] (implicit reduce: Reduce[T, N1, N2], transition: Transition[T, N2, N3]): Transition[T, N1, N3] = Transition { (state, terminal) => transition.transit(reduce.reduce(state), terminal) }
  implicit def accept_transition [NX, R] (implicit accept: Accept[NX, R]): Transition[EoI.type, NX, R] = Transition { (n, _) => accept.accept(n) }
  implicit def accept_ast[NX, R] (node: NX)(implicit transition: Transition[EoI.type, NX, R]): R = transition.transit(node, EoI)
  implicit class transition_lp [N1, N2] (node: N1) (implicit transition1: Transition[Lp.type, N1, N2]) {
  def lp [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Lp), value)
  def lp [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Lp), EoI)
}
  implicit class transition_mul [N1, N2] (node: N1) (implicit transition1: Transition[Mul.type, N1, N2]) {
  def mul [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Mul), value)
  def mul [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Mul), EoI)
}
  implicit class transition_rp [N1, N2] (node: N1) (implicit transition1: Transition[Rp.type, N1, N2]) {
  def rp [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Rp), value)
  def rp [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Rp), EoI)
}
  implicit class transition_minus [N1, N2] (node: N1) (implicit transition1: Transition[Minus.type, N1, N2]) {
  def minus [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Minus), value)
  def minus [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Minus), EoI)
}
  implicit class transition_end [N1, N2] (node: N1) (implicit transition1: Transition[End.type, N1, N2]) {
  def end [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, End), value)
  def end [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, End), EoI)
}
  implicit class transition_plus [N1, N2] (node: N1) (implicit transition1: Transition[Plus.type, N1, N2]) {
  def plus [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Plus), value)
  def plus [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Plus), EoI)
}
  implicit class transition_div [N1, N2] (node: N1) (implicit transition1: Transition[Div.type, N1, N2]) {
  def div [N3] (value: Lp.type)(implicit transition2: Transition[Lp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: Mul.type)(implicit transition2: Transition[Mul.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: Rp.type)(implicit transition2: Transition[Rp.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: Minus.type)(implicit transition2: Transition[Minus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: End.type)(implicit transition2: Transition[End.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: Plus.type)(implicit transition2: Transition[Plus.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: IntNum)(implicit transition2: Transition[IntNum, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [N3] (value: Div.type)(implicit transition2: Transition[Div.type, N2, N3]): N3 = transition2.transit(transition1.transit(node, Div), value)
  def div [R] (eoi: EoI.type) (implicit transition2: Transition[EoI.type, N2, R]): R = transition2.transit(transition1.transit(node, Div), EoI)
}
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  implicit class transition_num [N1, N2] (node: N1) (implicit transition: Transition[IntNum, N1, N2]) { def int (value: Int): N2 = transition.transit(node, Node7(Node26, value)) }
  implicit class transition_id [N1, N2] (node: N1) (implicit transition: Transition[Id, N1, N2]) { def id (value: String): N2 = transition.transit(node, Id(value)) }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  implicit def node2_shift_node20 [NX] : Shift[Lp.type, Node2[NX], Node20[Node2[NX]]] = Shift((s, _) => Node20(s))
  implicit def node2_shift_node7 [NX] : Shift[IntNum, Node2[NX], Node7[Node2[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node3_shift_node17 [NX] : Shift[Div.type, Node3[NX], Node17[Node3[NX]]] = Shift((s, _) => Node17(s))
  implicit def node3_shift_node22 [NX] : Shift[Mul.type, Node3[NX], Node22[Node3[NX]]] = Shift((s, _) => Node22(s))
  implicit def node4_shift_node17 [NX] : Shift[Div.type, Node4[NX], Node17[Node4[NX]]] = Shift((s, _) => Node17(s))
  implicit def node4_shift_node22 [NX] : Shift[Mul.type, Node4[NX], Node22[Node4[NX]]] = Shift((s, _) => Node22(s))
  implicit def node6_shift_node20 [NX] : Shift[Lp.type, Node6[NX], Node20[Node6[NX]]] = Shift((s, _) => Node20(s))
  implicit def node6_shift_node7 [NX] : Shift[IntNum, Node6[NX], Node7[Node6[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node8_shift_node12 [NX] : Shift[End.type, Node8[NX], Node12[Node8[NX]]] = Shift((s, _) => Node12(s))
  implicit def node8_shift_node2 [NX] : Shift[Minus.type, Node8[NX], Node2[Node8[NX]]] = Shift((s, _) => Node2(s))
  implicit def node8_shift_node6 [NX] : Shift[Plus.type, Node8[NX], Node6[Node8[NX]]] = Shift((s, _) => Node6(s))
  implicit def node9_shift_node17 [NX] : Shift[Div.type, Node9[NX], Node17[Node9[NX]]] = Shift((s, _) => Node17(s))
  implicit def node9_shift_node22 [NX] : Shift[Mul.type, Node9[NX], Node22[Node9[NX]]] = Shift((s, _) => Node22(s))
  implicit def node17_shift_node20 [NX] : Shift[Lp.type, Node17[NX], Node20[Node17[NX]]] = Shift((s, _) => Node20(s))
  implicit def node17_shift_node7 [NX] : Shift[IntNum, Node17[NX], Node7[Node17[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node18_shift_node19 [NX] : Shift[Rp.type, Node18[NX], Node19[Node18[NX]]] = Shift((s, _) => Node19(s))
  implicit def node18_shift_node2 [NX] : Shift[Minus.type, Node18[NX], Node2[Node18[NX]]] = Shift((s, _) => Node2(s))
  implicit def node18_shift_node6 [NX] : Shift[Plus.type, Node18[NX], Node6[Node18[NX]]] = Shift((s, _) => Node6(s))
  implicit def node20_shift_node20 [NX] : Shift[Lp.type, Node20[NX], Node20[Node20[NX]]] = Shift((s, _) => Node20(s))
  implicit def node20_shift_node7 [NX] : Shift[IntNum, Node20[NX], Node7[Node20[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node22_shift_node20 [NX] : Shift[Lp.type, Node22[NX], Node20[Node22[NX]]] = Shift((s, _) => Node20(s))
  implicit def node22_shift_node7 [NX] : Shift[IntNum, Node22[NX], Node7[Node22[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node25_shift_node20 [NX] : Shift[Lp.type, Node25[NX], Node20[Node25[NX]]] = Shift((s, _) => Node20(s))
  implicit def node25_shift_node7 [NX] : Shift[IntNum, Node25[NX], Node7[Node25[NX]]] = Shift((s, t) => Node7(s, t.value))
  implicit def node26_shift_node20 : Shift[Lp.type, Node26.type, Node20[Node26.type]] = Shift((s, _) => Node20(s))
  implicit def node26_shift_node7 : Shift[IntNum, Node26.type, Node7[Node26.type]] = Shift((s, t) => Node7(s, t.value))
  implicit def node0_reduce_node23_mul_6_3_17 [NX] : Reduce[Mul.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_mul_25_9_17 [NX] : Reduce[Mul.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_mul_26_9_17 : Reduce[Mul.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_mul_2_4_17 [NX] : Reduce[Mul.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_mul_20_9_17 [NX] : Reduce[Mul.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_rp_25_9_17 [NX] : Reduce[Rp.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_rp_2_4_17 [NX] : Reduce[Rp.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_rp_6_3_17 [NX] : Reduce[Rp.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_rp_26_9_17 : Reduce[Rp.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_rp_20_9_17 [NX] : Reduce[Rp.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_minus_2_4_17 [NX] : Reduce[Minus.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_minus_26_9_17 : Reduce[Minus.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_minus_6_3_17 [NX] : Reduce[Minus.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_minus_20_9_17 [NX] : Reduce[Minus.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_minus_25_9_17 [NX] : Reduce[Minus.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_end_26_9_17 : Reduce[End.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_end_2_4_17 [NX] : Reduce[End.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_end_20_9_17 [NX] : Reduce[End.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_end_25_9_17 [NX] : Reduce[End.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_end_6_3_17 [NX] : Reduce[End.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_plus_6_3_17 [NX] : Reduce[Plus.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_plus_26_9_17 : Reduce[Plus.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_plus_25_9_17 [NX] : Reduce[Plus.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_plus_20_9_17 [NX] : Reduce[Plus.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_plus_2_4_17 [NX] : Reduce[Plus.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_div_6_3_17 [NX] : Reduce[Div.type, Node0[Node17[Node3[Node6[NX]]]], Node23[Node6[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_div_20_9_17 [NX] : Reduce[Div.type, Node0[Node17[Node9[Node20[NX]]]], Node23[Node20[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_div_25_9_17 [NX] : Reduce[Div.type, Node0[Node17[Node9[Node25[NX]]]], Node23[Node25[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_div_2_4_17 [NX] : Reduce[Div.type, Node0[Node17[Node4[Node2[NX]]]], Node23[Node2[NX]]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node0_reduce_node23_div_26_9_17 : Reduce[Div.type, Node0[Node17[Node9[Node26.type]]], Node23[Node26.type]] = Reduce(s => Node23(s.prev.prev.prev, Div(s.prev.prev.value, s.value)))
  implicit def node1_reduce_node18_plus_20 [NX] : Reduce[Plus.type, Node1[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node1_reduce_node8_plus_25 [NX] : Reduce[Plus.type, Node1[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node8_plus_26 : Reduce[Plus.type, Node1[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node18_minus_20 [NX] : Reduce[Minus.type, Node1[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node1_reduce_node8_minus_25 [NX] : Reduce[Minus.type, Node1[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node8_minus_26 : Reduce[Minus.type, Node1[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node18_end_20 [NX] : Reduce[End.type, Node1[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node1_reduce_node8_end_25 [NX] : Reduce[End.type, Node1[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node8_end_26 : Reduce[End.type, Node1[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node18_rp_20 [NX] : Reduce[Rp.type, Node1[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node1_reduce_node8_rp_25 [NX] : Reduce[Rp.type, Node1[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node1_reduce_node8_rp_26 : Reduce[Rp.type, Node1[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node3_reduce_node10_plus_25_8_6 [NX] : Reduce[Plus.type, Node3[Node6[Node8[Node25[NX]]]], Node10[Node25[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_plus_26_8_6 : Reduce[Plus.type, Node3[Node6[Node8[Node26.type]]], Node10[Node26.type]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_plus_20_18_6 [NX] : Reduce[Plus.type, Node3[Node6[Node18[Node20[NX]]]], Node10[Node20[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_minus_25_8_6 [NX] : Reduce[Minus.type, Node3[Node6[Node8[Node25[NX]]]], Node10[Node25[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_minus_26_8_6 : Reduce[Minus.type, Node3[Node6[Node8[Node26.type]]], Node10[Node26.type]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_minus_20_18_6 [NX] : Reduce[Minus.type, Node3[Node6[Node18[Node20[NX]]]], Node10[Node20[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_end_25_8_6 [NX] : Reduce[End.type, Node3[Node6[Node8[Node25[NX]]]], Node10[Node25[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_end_26_8_6 : Reduce[End.type, Node3[Node6[Node8[Node26.type]]], Node10[Node26.type]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_end_20_18_6 [NX] : Reduce[End.type, Node3[Node6[Node18[Node20[NX]]]], Node10[Node20[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_rp_25_8_6 [NX] : Reduce[Rp.type, Node3[Node6[Node8[Node25[NX]]]], Node10[Node25[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_rp_26_8_6 : Reduce[Rp.type, Node3[Node6[Node8[Node26.type]]], Node10[Node26.type]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node3_reduce_node10_rp_20_18_6 [NX] : Reduce[Rp.type, Node3[Node6[Node18[Node20[NX]]]], Node10[Node20[NX]]] = Reduce(s => Node10(s.prev.prev.prev, Add(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_plus_25_8_2 [NX] : Reduce[Plus.type, Node4[Node2[Node8[Node25[NX]]]], Node1[Node25[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_plus_26_8_2 : Reduce[Plus.type, Node4[Node2[Node8[Node26.type]]], Node1[Node26.type]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_plus_20_18_2 [NX] : Reduce[Plus.type, Node4[Node2[Node18[Node20[NX]]]], Node1[Node20[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_minus_25_8_2 [NX] : Reduce[Minus.type, Node4[Node2[Node8[Node25[NX]]]], Node1[Node25[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_minus_26_8_2 : Reduce[Minus.type, Node4[Node2[Node8[Node26.type]]], Node1[Node26.type]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_minus_20_18_2 [NX] : Reduce[Minus.type, Node4[Node2[Node18[Node20[NX]]]], Node1[Node20[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_end_25_8_2 [NX] : Reduce[End.type, Node4[Node2[Node8[Node25[NX]]]], Node1[Node25[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_end_26_8_2 : Reduce[End.type, Node4[Node2[Node8[Node26.type]]], Node1[Node26.type]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_end_20_18_2 [NX] : Reduce[End.type, Node4[Node2[Node18[Node20[NX]]]], Node1[Node20[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_rp_25_8_2 [NX] : Reduce[Rp.type, Node4[Node2[Node8[Node25[NX]]]], Node1[Node25[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_rp_26_8_2 : Reduce[Rp.type, Node4[Node2[Node8[Node26.type]]], Node1[Node26.type]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node4_reduce_node1_rp_20_18_2 [NX] : Reduce[Rp.type, Node4[Node2[Node18[Node20[NX]]]], Node1[Node20[NX]]] = Reduce(s => Node1(s.prev.prev.prev, Sub(s.prev.prev.value, s.value)))
  implicit def node5_reduce_node16_mul_26 : Reduce[Mul.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_mul_2 [NX] : Reduce[Mul.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node13_mul_22 [NX] : Reduce[Mul.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node16_mul_6 [NX] : Reduce[Mul.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_mul_20 [NX] : Reduce[Mul.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node0_mul_17 [NX] : Reduce[Mul.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node16_mul_25 [NX] : Reduce[Mul.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_rp_26 : Reduce[Rp.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_rp_2 [NX] : Reduce[Rp.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node13_rp_22 [NX] : Reduce[Rp.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node0_rp_17 [NX] : Reduce[Rp.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node16_rp_6 [NX] : Reduce[Rp.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_rp_25 [NX] : Reduce[Rp.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_rp_20 [NX] : Reduce[Rp.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node13_minus_22 [NX] : Reduce[Minus.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node16_minus_20 [NX] : Reduce[Minus.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_minus_26 : Reduce[Minus.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_minus_6 [NX] : Reduce[Minus.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_minus_2 [NX] : Reduce[Minus.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node0_minus_17 [NX] : Reduce[Minus.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node16_minus_25 [NX] : Reduce[Minus.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node13_end_22 [NX] : Reduce[End.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node0_end_17 [NX] : Reduce[End.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node16_end_26 : Reduce[End.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_end_20 [NX] : Reduce[End.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_end_2 [NX] : Reduce[End.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_end_25 [NX] : Reduce[End.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_end_6 [NX] : Reduce[End.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_plus_20 [NX] : Reduce[Plus.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_plus_2 [NX] : Reduce[Plus.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_plus_26 : Reduce[Plus.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node0_plus_17 [NX] : Reduce[Plus.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node13_plus_22 [NX] : Reduce[Plus.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node16_plus_6 [NX] : Reduce[Plus.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_plus_25 [NX] : Reduce[Plus.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_div_2 [NX] : Reduce[Div.type, Node5[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_div_26 : Reduce[Div.type, Node5[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node13_div_22 [NX] : Reduce[Div.type, Node5[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node5_reduce_node16_div_6 [NX] : Reduce[Div.type, Node5[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node16_div_25 [NX] : Reduce[Div.type, Node5[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node5_reduce_node0_div_17 [NX] : Reduce[Div.type, Node5[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node5_reduce_node16_div_20 [NX] : Reduce[Div.type, Node5[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node7_reduce_node14_mul_25 [NX] : Reduce[Mul.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_26 : Reduce[Mul.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_6 [NX] : Reduce[Mul.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_22 [NX] : Reduce[Mul.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_2 [NX] : Reduce[Mul.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_17 [NX] : Reduce[Mul.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_mul_20 [NX] : Reduce[Mul.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_22 [NX] : Reduce[Rp.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_17 [NX] : Reduce[Rp.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_2 [NX] : Reduce[Rp.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_20 [NX] : Reduce[Rp.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_25 [NX] : Reduce[Rp.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_26 : Reduce[Rp.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_rp_6 [NX] : Reduce[Rp.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_2 [NX] : Reduce[Minus.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_20 [NX] : Reduce[Minus.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_25 [NX] : Reduce[Minus.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_22 [NX] : Reduce[Minus.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_6 [NX] : Reduce[Minus.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_26 : Reduce[Minus.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_minus_17 [NX] : Reduce[Minus.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_6 [NX] : Reduce[End.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_17 [NX] : Reduce[End.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_25 [NX] : Reduce[End.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_2 [NX] : Reduce[End.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_22 [NX] : Reduce[End.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_20 [NX] : Reduce[End.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_end_26 : Reduce[End.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_22 [NX] : Reduce[Plus.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_25 [NX] : Reduce[Plus.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_2 [NX] : Reduce[Plus.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_6 [NX] : Reduce[Plus.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_20 [NX] : Reduce[Plus.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_17 [NX] : Reduce[Plus.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_plus_26 : Reduce[Plus.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_26 : Reduce[Div.type, Node7[Node26.type], Node14[Node26.type]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_6 [NX] : Reduce[Div.type, Node7[Node6[NX]], Node14[Node6[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_2 [NX] : Reduce[Div.type, Node7[Node2[NX]], Node14[Node2[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_17 [NX] : Reduce[Div.type, Node7[Node17[NX]], Node14[Node17[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_25 [NX] : Reduce[Div.type, Node7[Node25[NX]], Node14[Node25[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_22 [NX] : Reduce[Div.type, Node7[Node22[NX]], Node14[Node22[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node7_reduce_node14_div_20 [NX] : Reduce[Div.type, Node7[Node20[NX]], Node14[Node20[NX]]] = Reduce(s => Node14(s.prev, Num(s.value)))
  implicit def node9_reduce_node18_plus_20 [NX] : Reduce[Plus.type, Node9[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node9_reduce_node8_plus_25 [NX] : Reduce[Plus.type, Node9[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node8_plus_26 : Reduce[Plus.type, Node9[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node18_minus_20 [NX] : Reduce[Minus.type, Node9[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node9_reduce_node8_minus_25 [NX] : Reduce[Minus.type, Node9[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node8_minus_26 : Reduce[Minus.type, Node9[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node18_end_20 [NX] : Reduce[End.type, Node9[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node9_reduce_node8_end_25 [NX] : Reduce[End.type, Node9[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node8_end_26 : Reduce[End.type, Node9[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node18_rp_20 [NX] : Reduce[Rp.type, Node9[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node9_reduce_node8_rp_25 [NX] : Reduce[Rp.type, Node9[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node9_reduce_node8_rp_26 : Reduce[Rp.type, Node9[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node18_rp_20 [NX] : Reduce[Rp.type, Node10[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node10_reduce_node8_rp_25 [NX] : Reduce[Rp.type, Node10[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node8_rp_26 : Reduce[Rp.type, Node10[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node18_plus_20 [NX] : Reduce[Plus.type, Node10[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node10_reduce_node8_plus_25 [NX] : Reduce[Plus.type, Node10[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node8_plus_26 : Reduce[Plus.type, Node10[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node18_minus_20 [NX] : Reduce[Minus.type, Node10[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node10_reduce_node8_minus_25 [NX] : Reduce[Minus.type, Node10[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node8_minus_26 : Reduce[Minus.type, Node10[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node18_end_20 [NX] : Reduce[End.type, Node10[Node20[NX]], Node18[Node20[NX]]] = Reduce(s => Node18(s.prev, s.value))
  implicit def node10_reduce_node8_end_25 [NX] : Reduce[End.type, Node10[Node25[NX]], Node8[Node25[NX]]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node10_reduce_node8_end_26 : Reduce[End.type, Node10[Node26.type], Node8[Node26.type]] = Reduce(s => Node8(s.prev, s.value))
  implicit def node11_reduce_node24_eoi_25_25 [NX] : Reduce[EoI.type, Node11[Node25[Node25[NX]]], Node24[Node25[NX]]] = Reduce(s => Node24(s.prev.prev, Stmts(s.prev.value, s.value)))
  implicit def node11_reduce_node24_eoi_26_25 : Reduce[EoI.type, Node11[Node25[Node26.type]], Node24[Node26.type]] = Reduce(s => Node24(s.prev.prev, Stmts(s.prev.value, s.value)))
  implicit def node12_reduce_node25_eoi_25_8 [NX] : Reduce[EoI.type, Node12[Node8[Node25[NX]]], Node25[Node25[NX]]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node12_reduce_node25_eoi_26_8 : Reduce[EoI.type, Node12[Node8[Node26.type]], Node25[Node26.type]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node12_reduce_node25_int_25_8 [NX] : Reduce[IntNum, Node12[Node8[Node25[NX]]], Node25[Node25[NX]]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node12_reduce_node25_int_26_8 : Reduce[IntNum, Node12[Node8[Node26.type]], Node25[Node26.type]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node12_reduce_node25_lp_25_8 [NX] : Reduce[Lp.type, Node12[Node8[Node25[NX]]], Node25[Node25[NX]]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node12_reduce_node25_lp_26_8 : Reduce[Lp.type, Node12[Node8[Node26.type]], Node25[Node26.type]] = Reduce(s => Node25(s.prev.prev, Stmt(s.prev.value)))
  implicit def node13_reduce_node21_mul_6_3_22 [NX] : Reduce[Mul.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_mul_26_9_22 : Reduce[Mul.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_mul_2_4_22 [NX] : Reduce[Mul.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_mul_25_9_22 [NX] : Reduce[Mul.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_mul_20_9_22 [NX] : Reduce[Mul.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_rp_2_4_22 [NX] : Reduce[Rp.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_rp_25_9_22 [NX] : Reduce[Rp.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_rp_6_3_22 [NX] : Reduce[Rp.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_rp_20_9_22 [NX] : Reduce[Rp.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_rp_26_9_22 : Reduce[Rp.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_minus_2_4_22 [NX] : Reduce[Minus.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_minus_6_3_22 [NX] : Reduce[Minus.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_minus_20_9_22 [NX] : Reduce[Minus.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_minus_26_9_22 : Reduce[Minus.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_minus_25_9_22 [NX] : Reduce[Minus.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_end_6_3_22 [NX] : Reduce[End.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_end_20_9_22 [NX] : Reduce[End.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_end_26_9_22 : Reduce[End.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_end_25_9_22 [NX] : Reduce[End.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_end_2_4_22 [NX] : Reduce[End.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_plus_26_9_22 : Reduce[Plus.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_plus_25_9_22 [NX] : Reduce[Plus.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_plus_20_9_22 [NX] : Reduce[Plus.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_plus_6_3_22 [NX] : Reduce[Plus.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_plus_2_4_22 [NX] : Reduce[Plus.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_div_2_4_22 [NX] : Reduce[Div.type, Node13[Node22[Node4[Node2[NX]]]], Node21[Node2[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_div_20_9_22 [NX] : Reduce[Div.type, Node13[Node22[Node9[Node20[NX]]]], Node21[Node20[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_div_25_9_22 [NX] : Reduce[Div.type, Node13[Node22[Node9[Node25[NX]]]], Node21[Node25[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_div_26_9_22 : Reduce[Div.type, Node13[Node22[Node9[Node26.type]]], Node21[Node26.type]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node13_reduce_node21_div_6_3_22 [NX] : Reduce[Div.type, Node13[Node22[Node3[Node6[NX]]]], Node21[Node6[NX]]] = Reduce(s => Node21(s.prev.prev.prev, Mul(s.prev.prev.value, s.value)))
  implicit def node14_reduce_node16_mul_6 [NX] : Reduce[Mul.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node0_mul_17 [NX] : Reduce[Mul.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_mul_26 : Reduce[Mul.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_mul_25 [NX] : Reduce[Mul.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_mul_2 [NX] : Reduce[Mul.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_mul_20 [NX] : Reduce[Mul.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_mul_22 [NX] : Reduce[Mul.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node16_rp_20 [NX] : Reduce[Rp.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_rp_26 : Reduce[Rp.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node0_rp_17 [NX] : Reduce[Rp.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_rp_25 [NX] : Reduce[Rp.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_rp_22 [NX] : Reduce[Rp.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node16_rp_2 [NX] : Reduce[Rp.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_rp_6 [NX] : Reduce[Rp.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_minus_25 [NX] : Reduce[Minus.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_minus_26 : Reduce[Minus.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_minus_2 [NX] : Reduce[Minus.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_minus_22 [NX] : Reduce[Minus.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node16_minus_20 [NX] : Reduce[Minus.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_minus_6 [NX] : Reduce[Minus.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node0_minus_17 [NX] : Reduce[Minus.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_end_25 [NX] : Reduce[End.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node0_end_17 [NX] : Reduce[End.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_end_2 [NX] : Reduce[End.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_end_6 [NX] : Reduce[End.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_end_26 : Reduce[End.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_end_22 [NX] : Reduce[End.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node16_end_20 [NX] : Reduce[End.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_plus_2 [NX] : Reduce[Plus.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_plus_26 : Reduce[Plus.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_plus_6 [NX] : Reduce[Plus.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_plus_22 [NX] : Reduce[Plus.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node0_plus_17 [NX] : Reduce[Plus.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_plus_20 [NX] : Reduce[Plus.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_plus_25 [NX] : Reduce[Plus.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_div_6 [NX] : Reduce[Div.type, Node14[Node6[NX]], Node16[Node6[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node0_div_17 [NX] : Reduce[Div.type, Node14[Node17[NX]], Node0[Node17[NX]]] = Reduce(s => Node0(s.prev, s.value))
  implicit def node14_reduce_node16_div_26 : Reduce[Div.type, Node14[Node26.type], Node16[Node26.type]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_div_25 [NX] : Reduce[Div.type, Node14[Node25[NX]], Node16[Node25[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node13_div_22 [NX] : Reduce[Div.type, Node14[Node22[NX]], Node13[Node22[NX]]] = Reduce(s => Node13(s.prev, s.value))
  implicit def node14_reduce_node16_div_2 [NX] : Reduce[Div.type, Node14[Node2[NX]], Node16[Node2[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node14_reduce_node16_div_20 [NX] : Reduce[Div.type, Node14[Node20[NX]], Node16[Node20[NX]]] = Reduce(s => Node16(s.prev, s.value))
  implicit def node15_accept[NX]: Accept[Node15[NX], Program] = Accept(s => s.value)
  implicit def node16_reduce_node4_mul_2 [NX] : Reduce[Mul.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node16_reduce_node9_mul_25 [NX] : Reduce[Mul.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_mul_20 [NX] : Reduce[Mul.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node3_mul_6 [NX] : Reduce[Mul.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node9_mul_26 : Reduce[Mul.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_rp_26 : Reduce[Rp.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node3_rp_6 [NX] : Reduce[Rp.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node9_rp_25 [NX] : Reduce[Rp.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node4_rp_2 [NX] : Reduce[Rp.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node16_reduce_node9_rp_20 [NX] : Reduce[Rp.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_minus_25 [NX] : Reduce[Minus.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_minus_26 : Reduce[Minus.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node3_minus_6 [NX] : Reduce[Minus.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node4_minus_2 [NX] : Reduce[Minus.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node16_reduce_node9_minus_20 [NX] : Reduce[Minus.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_end_25 [NX] : Reduce[End.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_end_20 [NX] : Reduce[End.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node4_end_2 [NX] : Reduce[End.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node16_reduce_node3_end_6 [NX] : Reduce[End.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node9_end_26 : Reduce[End.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_plus_26 : Reduce[Plus.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node3_plus_6 [NX] : Reduce[Plus.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node9_plus_25 [NX] : Reduce[Plus.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node4_plus_2 [NX] : Reduce[Plus.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node16_reduce_node9_plus_20 [NX] : Reduce[Plus.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node3_div_6 [NX] : Reduce[Div.type, Node16[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node16_reduce_node9_div_25 [NX] : Reduce[Div.type, Node16[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_div_26 : Reduce[Div.type, Node16[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node9_div_20 [NX] : Reduce[Div.type, Node16[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node16_reduce_node4_div_2 [NX] : Reduce[Div.type, Node16[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node19_reduce_node5_mul_20_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_26_20_18 : Reduce[Mul.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_22_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_2_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_6_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_25_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_mul_17_20_18 [NX] : Reduce[Mul.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_6_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_25_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_2_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_20_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_26_20_18 : Reduce[Rp.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_22_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_rp_17_20_18 [NX] : Reduce[Rp.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_6_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_26_20_18 : Reduce[Minus.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_22_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_25_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_2_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_20_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_minus_17_20_18 [NX] : Reduce[Minus.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_2_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_20_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_6_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_17_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_25_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_26_20_18 : Reduce[End.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_end_22_20_18 [NX] : Reduce[End.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_20_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_26_20_18 : Reduce[Plus.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_6_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_17_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_22_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_25_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_plus_2_20_18 [NX] : Reduce[Plus.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_25_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node25[NX]]]], Node5[Node25[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_2_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node2[NX]]]], Node5[Node2[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_17_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node17[NX]]]], Node5[Node17[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_22_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node22[NX]]]], Node5[Node22[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_6_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node6[NX]]]], Node5[Node6[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_20_20_18 [NX] : Reduce[Div.type, Node19[Node18[Node20[Node20[NX]]]], Node5[Node20[NX]]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node19_reduce_node5_div_26_20_18 : Reduce[Div.type, Node19[Node18[Node20[Node26.type]]], Node5[Node26.type]] = Reduce(s => Node5(s.prev.prev.prev, Paren(s.prev.value)))
  implicit def node21_reduce_node9_mul_25 [NX] : Reduce[Mul.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_mul_26 : Reduce[Mul.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node3_mul_6 [NX] : Reduce[Mul.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node9_mul_20 [NX] : Reduce[Mul.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node4_mul_2 [NX] : Reduce[Mul.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node9_rp_25 [NX] : Reduce[Rp.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_rp_20 [NX] : Reduce[Rp.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_rp_26 : Reduce[Rp.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node4_rp_2 [NX] : Reduce[Rp.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node3_rp_6 [NX] : Reduce[Rp.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node4_minus_2 [NX] : Reduce[Minus.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node9_minus_25 [NX] : Reduce[Minus.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_minus_20 [NX] : Reduce[Minus.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node3_minus_6 [NX] : Reduce[Minus.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node9_minus_26 : Reduce[Minus.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_end_26 : Reduce[End.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_end_20 [NX] : Reduce[End.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node4_end_2 [NX] : Reduce[End.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node9_end_25 [NX] : Reduce[End.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node3_end_6 [NX] : Reduce[End.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node9_plus_26 : Reduce[Plus.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node4_plus_2 [NX] : Reduce[Plus.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node9_plus_25 [NX] : Reduce[Plus.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node3_plus_6 [NX] : Reduce[Plus.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node9_plus_20 [NX] : Reduce[Plus.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node3_div_6 [NX] : Reduce[Div.type, Node21[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node21_reduce_node9_div_26 : Reduce[Div.type, Node21[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node4_div_2 [NX] : Reduce[Div.type, Node21[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node21_reduce_node9_div_20 [NX] : Reduce[Div.type, Node21[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node21_reduce_node9_div_25 [NX] : Reduce[Div.type, Node21[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_mul_20 [NX] : Reduce[Mul.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_mul_26 : Reduce[Mul.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_mul_25 [NX] : Reduce[Mul.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node3_mul_6 [NX] : Reduce[Mul.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node4_mul_2 [NX] : Reduce[Mul.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node9_rp_26 : Reduce[Rp.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node4_rp_2 [NX] : Reduce[Rp.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node3_rp_6 [NX] : Reduce[Rp.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node9_rp_20 [NX] : Reduce[Rp.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_rp_25 [NX] : Reduce[Rp.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_minus_26 : Reduce[Minus.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_minus_25 [NX] : Reduce[Minus.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_minus_20 [NX] : Reduce[Minus.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node3_minus_6 [NX] : Reduce[Minus.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node4_minus_2 [NX] : Reduce[Minus.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node4_end_2 [NX] : Reduce[End.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node3_end_6 [NX] : Reduce[End.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node9_end_26 : Reduce[End.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_end_20 [NX] : Reduce[End.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_end_25 [NX] : Reduce[End.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_plus_26 : Reduce[Plus.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_plus_20 [NX] : Reduce[Plus.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node3_plus_6 [NX] : Reduce[Plus.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node9_plus_25 [NX] : Reduce[Plus.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node4_plus_2 [NX] : Reduce[Plus.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node9_div_25 [NX] : Reduce[Div.type, Node23[Node25[NX]], Node9[Node25[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node9_div_20 [NX] : Reduce[Div.type, Node23[Node20[NX]], Node9[Node20[NX]]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node23_reduce_node4_div_2 [NX] : Reduce[Div.type, Node23[Node2[NX]], Node4[Node2[NX]]] = Reduce(s => Node4(s.prev, s.value))
  implicit def node23_reduce_node3_div_6 [NX] : Reduce[Div.type, Node23[Node6[NX]], Node3[Node6[NX]]] = Reduce(s => Node3(s.prev, s.value))
  implicit def node23_reduce_node9_div_26 : Reduce[Div.type, Node23[Node26.type], Node9[Node26.type]] = Reduce(s => Node9(s.prev, s.value))
  implicit def node24_reduce_node11_eoi_25 [NX] : Reduce[EoI.type, Node24[Node25[NX]], Node11[Node25[NX]]] = Reduce(s => Node11(s.prev, s.value))
  implicit def node24_reduce_node15_eoi_26 : Reduce[EoI.type, Node24[Node26.type], Node15[Node26.type]] = Reduce(s => Node15(s.prev, s.value))
  implicit def node25_reduce_node11_eoi_25 [NX] : Reduce[EoI.type, Node25[Node25[NX]], Node11[Node25[NX]]] = Reduce(s => Node11(s.prev, s.value))
  implicit def node25_reduce_node15_eoi_26 : Reduce[EoI.type, Node25[Node26.type], Node15[Node26.type]] = Reduce(s => Node15(s.prev, s.value))
}

object Main {
  import MathDSL._

  def main (args: Array[String]): Unit = {
    val program: Program = lp int(10) plus int(2) rp mul lp int(10) div int(5) rp end
    println(program)
  }
}
